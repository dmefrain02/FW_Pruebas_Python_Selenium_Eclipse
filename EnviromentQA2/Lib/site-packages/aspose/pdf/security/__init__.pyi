import aspose.pdf
import aspose.pydrawing
import datetime
import decimal
import io
import uuid
from typing import Iterable

class DsaAlgorithmInfo(aspose.pdf.security.KeyedSignatureAlgorithmInfo):
    '''Represents a class for the information about the DSA signature algorithm.'''
    
    ...

class EcdsaAlgorithmInfo(aspose.pdf.security.KeyedSignatureAlgorithmInfo):
    '''Represents a class for the information about the ECDSA signature algorithm.'''
    
    @property
    def ECC_NAME(self) -> str:
        '''Gets the name of the elliptic curve used by the ECDSA.'''
        ...
    
    ...

class KeyedSignatureAlgorithmInfo(aspose.pdf.security.SignatureAlgorithmInfo):
    '''Represents a class for information about a keyed signature algorithm.'''
    
    @property
    def KEY_SIZE(self) -> int:
        '''Gets the size of the cryptographic key used by the signature algorithm.'''
        ...
    
    ...

class RsaAlgorithmInfo(aspose.pdf.security.KeyedSignatureAlgorithmInfo):
    '''Represents a class for the information about the RSA signature algorithm.'''
    
    ...

class SignatureAlgorithmInfo:
    '''Represents a class for information about a signature algorithm, including its type,
    cryptographic standard, and digest hash algorithm.'''
    
    @property
    def signature_name(self) -> str:
        '''Gets the name of the signature field.'''
        ...
    
    @property
    def ALGORITHM_TYPE(self) -> aspose.pdf.security.SignatureAlgorithmType:
        '''Gets the type of the signature algorithm used for signing the PDF document.'''
        ...
    
    @property
    def CRYPTOGRAPHIC_STANDARD(self) -> aspose.pdf.security.CryptographicStandard:
        '''Gets the cryptographic standard used for signing the PDF document.'''
        ...
    
    @property
    def DIGEST_HASH_ALGORITHM(self) -> aspose.pdf.DigestHashAlgorithm:
        '''Gets the digest hash algorithm used for the signature.
        For a timestamp, this is the digest hash algorithm with which the hash of the document content is signed.'''
        ...
    
    ...

class TimestampAlgorithmInfo(aspose.pdf.security.SignatureAlgorithmInfo):
    '''Represents a class for the information about the timestamp signature algorithm.'''
    
    @property
    def CONTENT_HASH_ALGORITHM(self) -> aspose.pdf.DigestHashAlgorithm:
        '''Gets the hash algorithm that hashed the content of the document and then signed it using :attr:`SignatureAlgorithmInfo.DIGEST_HASH_ALGORITHM`.'''
        ...
    
    ...

class UnknownSignatureAlgorithmInfo(aspose.pdf.security.SignatureAlgorithmInfo):
    '''Represents a class for the unknown signature algorithm information.'''
    
    ...

class ValidationOptions:
    '''Represents options for validating a digital signature in a PDF document.'''
    
    def __init__(self):
        ...
    
    @property
    def validation_mode(self) -> aspose.pdf.security.ValidationMode:
        '''Gets or sets the mode of validation for digital signatures in a PDF document.
        The ValidationMode property determines the strictness of the validation process.'''
        ...
    
    @validation_mode.setter
    def validation_mode(self, value: aspose.pdf.security.ValidationMode):
        ...
    
    @property
    def validation_method(self) -> aspose.pdf.security.ValidationMethod:
        '''Gets or sets the method used to validate a certificate.'''
        ...
    
    @validation_method.setter
    def validation_method(self, value: aspose.pdf.security.ValidationMethod):
        ...
    
    @property
    def request_timeout(self) -> int:
        '''Gets or sets the timeout duration, in milliseconds, for network-related operations during the validation process.
        The RequestTimeout property defines the maximum time the system should wait for a network response
        when accessing online resources, such as revocation status or OCSP servers.'''
        ...
    
    @request_timeout.setter
    def request_timeout(self, value: int):
        ...
    
    ...

class ValidationResult:
    '''Represents the result of a validation process for a certificate.
    
    The ValidationResult class provides information about the outcome of validating a certificate,
    including its status and a message describing any issues encountered during the validation.'''
    
    @property
    def status(self) -> aspose.pdf.security.ValidationStatus:
        '''Gets the status of the validation process for a certificate.
        
        The Status property indicates the outcome of the certificate validation.
        Possible values are defined in the :class:`ValidationStatus` enumeration,
        such as Valid, Invalid, or Undefined. It provides an insight into whether
        the certificate passed the validation checks or not.'''
        ...
    
    @property
    def message(self) -> str:
        '''Represents the message associated with the validation result.
        
        The Message property provides additional context or information about
        the state of the validation result.'''
        ...
    
    ...

class CryptographicStandard:
    '''Represents the available cryptographic standards for securing PDF documents.'''
    
    PKCS1: CryptographicStandard
    PKCS7: CryptographicStandard
    RFC3161: CryptographicStandard

class SignatureAlgorithmType:
    '''Enumerates the types of signature algorithms used for digital signatures.'''
    
    ECDSA: SignatureAlgorithmType
    RSA: SignatureAlgorithmType
    DSA: SignatureAlgorithmType
    TIMESTAMP: SignatureAlgorithmType
    UNKNOWN: SignatureAlgorithmType

class ValidationMethod:
    '''Represents an enum  defined the method used for certificate validation.'''
    
    AUTO: ValidationMethod
    OCSP: ValidationMethod
    CRL: ValidationMethod
    ALL: ValidationMethod

class ValidationMode:
    '''Specifies the validation mode for PDF signature validation processes.'''
    
    NONE: ValidationMode
    ONLY_CHECK: ValidationMode
    STRICT: ValidationMode

class ValidationStatus:
    '''Represents the validation status of a certificate validation.
    
    This enumeration defines the possible outcomes of certificate validation:
    - Valid: Indicates that the certificate has been successfully validated.
    - Invalid: Indicates that the certificate validation failed.
    - Undefined: Indicates that the validation process was inconclusive or not performed.'''
    
    VALID: ValidationStatus
    INVALID: ValidationStatus
    UNDEFINED: ValidationStatus

